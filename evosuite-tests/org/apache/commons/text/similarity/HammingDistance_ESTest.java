/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 22 09:14:43 GMT 2023
 */

package org.apache.commons.text.similarity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.apache.commons.text.similarity.HammingDistance;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HammingDistance_ESTest extends HammingDistance_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      HammingDistance hammingDistance0 = new HammingDistance();
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      Integer integer0 = hammingDistance0.apply(charBuffer1, charBuffer0);
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      HammingDistance hammingDistance0 = new HammingDistance();
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1, 1);
      // Undeclared exception!
      try { 
        hammingDistance0.apply(charBuffer0, charBuffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CharSequences must have the same length
         //
         verifyException("org.apache.commons.text.similarity.HammingDistance", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HammingDistance hammingDistance0 = new HammingDistance();
      CharBuffer charBuffer0 = CharBuffer.allocate(4192);
      hammingDistance0.apply(charBuffer0, charBuffer0);
      hammingDistance0.apply(charBuffer0, charBuffer0);
      // Undeclared exception!
      hammingDistance0.apply(charBuffer0, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HammingDistance hammingDistance0 = new HammingDistance();
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.append((CharSequence) charBuffer1);
      // Undeclared exception!
      try { 
        hammingDistance0.apply(charBuffer1, charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HammingDistance hammingDistance0 = new HammingDistance();
      char[] charArray0 = new char[6];
      charArray0[1] = 'q';
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0, 1, 1);
      Integer integer0 = hammingDistance0.apply(charBuffer0, charBuffer1);
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HammingDistance hammingDistance0 = new HammingDistance();
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.allocate(1);
      // Undeclared exception!
      try { 
        hammingDistance0.apply(charBuffer1, charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CharSequences must have the same length
         //
         verifyException("org.apache.commons.text.similarity.HammingDistance", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HammingDistance hammingDistance0 = new HammingDistance();
      CharBuffer charBuffer0 = CharBuffer.allocate(1035);
      // Undeclared exception!
      try { 
        hammingDistance0.apply(charBuffer0, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CharSequences must not be null
         //
         verifyException("org.apache.commons.text.similarity.HammingDistance", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HammingDistance hammingDistance0 = new HammingDistance();
      // Undeclared exception!
      try { 
        hammingDistance0.apply((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CharSequences must not be null
         //
         verifyException("org.apache.commons.text.similarity.HammingDistance", e);
      }
  }
}
