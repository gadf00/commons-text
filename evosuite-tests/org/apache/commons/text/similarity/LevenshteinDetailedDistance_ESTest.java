/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 22 09:17:02 GMT 2023
 */

package org.apache.commons.text.similarity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.apache.commons.text.similarity.LevenshteinDetailedDistance;
import org.apache.commons.text.similarity.LevenshteinResults;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LevenshteinDetailedDistance_ESTest extends LevenshteinDetailedDistance_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4844);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 4844, 4844);
      Integer integer0 = new Integer(4844);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer0, charBuffer1);
      assertEquals(0, (int)levenshteinResults0.getSubstituteCount());
      assertEquals(4844, (int)levenshteinResults0.getDeleteCount());
      assertEquals(0, (int)levenshteinResults0.getInsertCount());
      assertEquals(4844, (int)levenshteinResults0.getDistance());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(96);
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      charBuffer0.append('[');
      Integer integer0 = new Integer(96);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer1, charBuffer0);
      assertEquals(0, (int)levenshteinResults0.getSubstituteCount());
      assertEquals(95, (int)levenshteinResults0.getDistance());
      assertEquals(95, (int)levenshteinResults0.getInsertCount());
      assertEquals(0, (int)levenshteinResults0.getDeleteCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4801);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 4801, 4801);
      Integer integer0 = new Integer(6);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer1, charBuffer0);
      assertEquals(0, (int)levenshteinResults0.getSubstituteCount());
      assertEquals(0, (int)levenshteinResults0.getDeleteCount());
      assertEquals(0, (int)levenshteinResults0.getInsertCount());
      assertEquals((-1), (int)levenshteinResults0.getDistance());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      Integer integer1 = levenshteinDetailedDistance0.getThreshold();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(226);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      Integer integer1 = levenshteinDetailedDistance0.getThreshold();
      assertEquals(226, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance();
      CharBuffer charBuffer0 = CharBuffer.allocate(1182);
      // Undeclared exception!
      levenshteinDetailedDistance0.apply(charBuffer0, charBuffer0);
  }


  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-733));
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = null;
      try {
        levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.text.similarity.LevenshteinDetailedDistance", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance();
      CharBuffer charBuffer0 = CharBuffer.allocate(4863);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 4863, 4863);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer0, charBuffer1);
      assertEquals(0, (int)levenshteinResults0.getSubstituteCount());
      assertEquals(4863, (int)levenshteinResults0.getDistance());
      assertEquals(4863, (int)levenshteinResults0.getDeleteCount());
      assertEquals(0, (int)levenshteinResults0.getInsertCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = LevenshteinDetailedDistance.getDefaultInstance();
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0, 0, 0);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer1, charBuffer0);
      assertEquals(0, (int)levenshteinResults0.getSubstituteCount());
      assertEquals(3, (int)levenshteinResults0.getDistance());
      assertEquals(3, (int)levenshteinResults0.getInsertCount());
      assertEquals(0, (int)levenshteinResults0.getDeleteCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance();
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        levenshteinDetailedDistance0.apply(charBuffer0, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CharSequences must not be null
         //
         verifyException("org.apache.commons.text.similarity.LevenshteinDetailedDistance", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      char[] charArray0 = new char[4];
      charArray0[2] = ']';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      char[] charArray1 = new char[6];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray1, 0, 4);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer0, charBuffer1);
      assertEquals((-1), (int)levenshteinResults0.getDistance());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = Integer.getInteger("Yby=O@wlic%(Lj", 4);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply("Yby=O@wlic%(Lj", "Yby=O@wlic%(Lj");
      assertEquals(0, (int)levenshteinResults0.getDistance());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      char[] charArray0 = new char[3];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      Integer integer0 = new Integer(1);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer1, charBuffer0);
      assertEquals((-1), (int)levenshteinResults0.getDistance());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(56);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer0, charBuffer0);
      assertEquals(0, (int)levenshteinResults0.getDistance());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(4541);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      char[] charArray0 = new char[6];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer1, charBuffer0);
      assertEquals(5, (int)levenshteinResults0.getDistance());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer1, charBuffer0);
      assertEquals((-1), (int)levenshteinResults0.getDistance());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(4541);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      char[] charArray0 = new char[6];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0, 1, 1);
      charBuffer0.put('t');
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer1, charBuffer0);
      assertEquals(0, (int)levenshteinResults0.getSubstituteCount());
      assertEquals(1, (int)levenshteinResults0.getDeleteCount());
      assertEquals(0, (int)levenshteinResults0.getInsertCount());
      assertEquals(1, (int)levenshteinResults0.getDistance());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer0, charBuffer0);
      assertEquals(0, (int)levenshteinResults0.getDeleteCount());
      assertEquals(0, (int)levenshteinResults0.getDistance());
      assertEquals(0, (int)levenshteinResults0.getInsertCount());
      assertEquals(0, (int)levenshteinResults0.getSubstituteCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        levenshteinDetailedDistance0.apply(charBuffer0, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CharSequences must not be null
         //
         verifyException("org.apache.commons.text.similarity.LevenshteinDetailedDistance", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance(integer0);
      // Undeclared exception!
      try { 
        levenshteinDetailedDistance0.apply((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CharSequences must not be null
         //
         verifyException("org.apache.commons.text.similarity.LevenshteinDetailedDistance", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(68);
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = LevenshteinDetailedDistance.getDefaultInstance();
      charBuffer0.get();
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer0, charBuffer1);
      assertEquals(1, (int)levenshteinResults0.getInsertCount());
      assertEquals(1, (int)levenshteinResults0.getDistance());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = ']';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = LevenshteinDetailedDistance.getDefaultInstance();
      char[] charArray1 = new char[4];
      charArray1[1] = ']';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray1);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer1, charBuffer0);
      assertEquals(2, (int)levenshteinResults0.getDistance());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      char[] charArray0 = new char[6];
      charArray0[5] = 'P';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      LevenshteinResults levenshteinResults0 = levenshteinDetailedDistance0.apply(charBuffer1, charBuffer0);
      assertEquals(5, (int)levenshteinResults0.getDistance());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = new LevenshteinDetailedDistance();
      Integer integer0 = levenshteinDetailedDistance0.getThreshold();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LevenshteinDetailedDistance levenshteinDetailedDistance0 = LevenshteinDetailedDistance.getDefaultInstance();
      // Undeclared exception!
      try { 
        levenshteinDetailedDistance0.apply((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CharSequences must not be null
         //
         verifyException("org.apache.commons.text.similarity.LevenshteinDetailedDistance", e);
      }
  }
}
